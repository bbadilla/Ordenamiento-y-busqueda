package Ordenamiento;

import java.lang.*;
import java.util.ArrayList;

public class MergeSort {
    
	
	//////////////////////////////////para arrays
	
    // Wrapper method for the real algorithm
    // T is the generic type which will be instantiated at runtime
    //  elementas are required to be comparable
    public static <T extends Comparable<T>> void sort(T[] a) {
	mergesort(a, 0, a.length-1);
    }
    
    // Recursive mergesort method, following the pseudocode
    private static <T extends Comparable<T>> void mergesort (T[] a, int i, int j) {
	if (j-i < 1) return;
	int mid = (i+j)/2;
	mergesort(a, i, mid);
	mergesort(a, mid+1, j);
	merge(a, i, mid, j);
    }

    // Merge method
    // Here we need to allocate a new array, but Java does not allow allocating arrays of a generic type
    // As a work-around we allocate an array of type Object[] the use type casting
    // This would usually generate a warning, which is suppressed
    private static <T extends Comparable<T>> void  merge(T[] a, int p, int mid, int q) {

	Object[] tmp = new Object[q-p+1]; 
	int i = p;
	int j = mid+1;
	int k = 0;
	while (i <= mid && j <= q) {
	    if (a[i].compareTo(a[j])<=0)
		tmp[k] = a[i++];
	    else
		tmp[k] = a[j++];
	    k++;
	}
	if (i <= mid && j > q) {
	    while (i <= mid) 
		tmp[k++] = a[i++];
	} else {
	    while (j <= q)
		tmp[k++] = a[j++];
	}
	for (k = 0; k < tmp.length; k++) {
	    a[k+p] = (T)(tmp[k]); // this is the line that woudl generate the warning 
	}
    }
    
    ////////////////// para array list
    public static <T extends Comparable<T>> void sortArrayList(ArrayList<T> a) {
    	mergesortArrayList(a, 0, a.size()-1);
        }
        
    	private static <T extends Comparable<T>> void mergesortArrayList (ArrayList<T> a, int i, int j) {
    	if (j-i < 1) return;
    	int mid = (i+j)/2;
    	mergesortArrayList(a, i, mid);
    	mergesortArrayList(a, mid+1, j);
    	mergeArrayList(a, i, mid, j);
        }

        // Merge method
        // Here we need to allocate a new array, but Java does not allow allocating arrays of a generic type
        // As a work-around we allocate an array of type Object[] the use type casting
        // This would usually generate a warning, which is suppressed
        private static <T extends Comparable<T>> void  mergeArrayList(ArrayList<T> a, int p, int mid, int q) {

    	Object[] tmp = new Object[q-p+1]; 
    	int i = p;
    	int j = mid+1;
    	int k = 0;
    	while (i <= mid && j <= q) {
    	    if (a.get(i).compareTo(a.get(j))<=0)
    		tmp[k] = a.get(i++);
    	    else
    		tmp[k] = a.get(j++);
    	    k++;
    	}
    	if (i <= mid && j > q) {
    	    while (i <= mid) 
    		tmp[k++] = a.get(i++);
    	} else {
    	    while (j <= q)
    		tmp[k++] = a.get(j++);
    	}
    	for (k = 0; k < tmp.length; k++) {
    	    a.set(k+p, (T)(tmp[k])) ; // this is the line that woudl generate the warning 
    	}
        }
        
        /////////////para linkedList
        
        public static <T extends Comparable<T>> void MergeSortLinked(Nodo<T> head) 
        {
            if (head == null || head.getSiguiente() == null)
               
            Nodo<T> a ;
            Nodo<T> b = head.getSiguiente();
            while ((b != null) && (b.next != null)) 
            {
                headOriginal = headOriginal.next;
                b = (b.next).next;
            }
            b = headOriginal.next;
            headOriginal.next = null;
            return merge(MergeSort(a), MergeSort(b));
        }
     
        public Node merge(Node a, Node b) 
        {
            Node temp = new Node();
            Node head = temp;
            Node c = head;
            while ((a != null) && (b != null)) 
            {
                if (a.item <= b.item) 
                {
                    c.next = a;
                    c = a;
                    a = a.next;
                }
                else 
                {
                    c.next = b;
                    c = b;
                    b = b.next;
                }
            }
            c.next = (a == null) ? b : a;
            return head.next;
        }
    }
}