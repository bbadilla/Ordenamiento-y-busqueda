package Ordenamiento;

import java.util.ArrayList;

public class QuickSort {
    
	///para arrayList
    // Wrapper method for the real algorithm
    // T is the generic type which will be instantiated at runtime
    // Elements are required to be comparable
    public static <T extends Comparable<T>> void sortArrayList(ArrayList<T> a) {
    	quicksort(a, 0, a.size()-1);
    }

    // Recursive quicksort method, following the pseudocode
    private static <T extends Comparable<T>> void quicksort (ArrayList<T> a, int i, int j) {
		if (i<j) {
		    int l = partition(a,i,j);
		    quicksort(a, i, l);
		    quicksort(a, l+1, j);
		}
    }

    private static <T extends Comparable<T>> int partition(ArrayList<T> a, int p, int q) {
		T x = a.get(p);
		int m = (p+q)/2;
		if ((a.get(p).compareTo(a.get(m))<=0 && a.get(m).compareTo(a.get(q))<=0) || (a.get(q).compareTo(a.get(m))<=0 && a.get(m).compareTo(a.get(p))<=0))
		    x = a.get(m);
		if ((a.get(p).compareTo(a.get(q))<=0 && a.get(q).compareTo(a.get(m))<=0) || (a.get(m).compareTo(a.get(q))<=0 && a.get(q).compareTo(a.get(p))<=0))
		    x = a.get(q);
		int i = p-1;
		int j = q+1;
		while (true) {
		    do i++; while (!(i>q || a.get(i).compareTo(x)>=0));
		    do j--; while (!(j<p || a.get(j).compareTo(x)<=0));
		    if (i<j) swap(a, i, j);
		    else return j;
		}
    }

    private static <T extends Comparable<T>> void swap (ArrayList<T> a, int i, int j) {
		T x;
		x = a.get(i);
		a.set(i, a.get(j)) ;
		a.set(j, x);
    }
    
    ///para array
    
    public static <T extends Comparable<T>> void sort(T[] a) {
    	quicksort(a, 0, a.length-1);
    }


    private static <T extends Comparable<T>> void quicksort (T[] a, int i, int j) {
		if (i<j) {
		    int l = partition(a,i,j);
		    quicksort(a, i, l);
		    quicksort(a, l+1, j);
		}
    }

    private static <T extends Comparable<T>> int partition(T[] a, int p, int q) {
		T x = a[p];
		int m = (p+q)/2;
		if ((a[p].compareTo(a[m])<=0 && a[m].compareTo(a[q])<=0) || (a[q].compareTo(a[m])<=0 && a[m].compareTo(a[p])<=0))
		    x = a[m];
		if ((a[p].compareTo(a[q])<=0 && a[q].compareTo(a[m])<=0) || (a[m].compareTo(a[q])<=0 && a[q].compareTo(a[p])<=0))
		    x = a[q];
		int i = p-1;
		int j = q+1;
		while (true) {
		    do i++; while (!(i>q || a[i].compareTo(x)>=0));
		    do j--; while (!(j<p || a[j].compareTo(x)<=0));
		    if (i<j) swap(a, i, j);
		    else return j;
		}
    }

    private static <T extends Comparable<T>> void swap (T[] a, int i, int j) {
		T x;
		x = a[i];
		a[i] = a[j];
		a[j] = x;
    }
    
    /// Para LinkedList
    public Nodo quickSort(Nodo head) {
        if (head == null || head.getSiguiente() == null){
          return head;
        }
        return quick(head, null);
      }

      private Nodo quick(Nodo start, Nodo end){
        if (start == null || start == end || start.getSiguiente() == end){
          return start;
        }

        Nodo[] result = partition(start, end);
        Nodo resultLeft = quick(result[0], result[1]);
        Nodo resultRight = quick(result[1].getSiguiente(), end);
        return resultLeft;
      }

      private Nodo[] partition(Nodo start, Nodo end){
        // start inclusive
        // end exclusive
        // return the new start node and the pivot node

        if (start == null || start == end || start.getSiguiente() == end){
          return new Nodo[] {start, start};
        }
        Nodo dummy = new Nodo(0);
        dummy.setSiguiente(start);

        for (Nodo j = start; j != null && j.getSiguiente() != null && j.getSiguiente() != end; j = j.getSiguiente()) {
          while (j.getSiguiente() != null && (int)j.getSiguiente().getDato() <= (int)start.getDato()){
            Nodo tmp = j.getSiguiente();
            j.setSiguiente(j.getSiguiente().getSiguiente()); 
            tmp.setSiguiente(dummy.getSiguiente()); 
            dummy.setSiguiente(tmp);
          }
        }

        return new Nodo[] {dummy.getSiguiente(), start};
      }
    
}

