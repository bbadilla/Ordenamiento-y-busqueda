package Ordenamiento;

import java.lang.*;
import java.util.ArrayList;

public class QuickSort {
    
	///para arrayList
    // Wrapper method for the real algorithm
    // T is the generic type which will be instantiated at runtime
    // Elements are required to be comparable
    public static <T extends Comparable<T>> void sortArrayList(ArrayList<T> a) {
    	quicksort(a, 0, a.size()-1);
    }

    // Recursive quicksort method, following the pseudocode
    private static <T extends Comparable<T>> void quicksort (ArrayList<T> a, int i, int j) {
		if (i<j) {
		    int l = partition(a,i,j);
		    quicksort(a, i, l);
		    quicksort(a, l+1, j);
		}
    }

    private static <T extends Comparable<T>> int partition(ArrayList<T> a, int p, int q) {
		T x = a.get(p);
		int m = (p+q)/2;
		if ((a.get(p).compareTo(a.get(m))<=0 && a.get(m).compareTo(a.get(q))<=0) || (a.get(q).compareTo(a.get(m))<=0 && a.get(m).compareTo(a.get(p))<=0))
		    x = a.get(m);
		if ((a.get(p).compareTo(a.get(q))<=0 && a.get(q).compareTo(a.get(m))<=0) || (a.get(m).compareTo(a.get(q))<=0 && a.get(q).compareTo(a.get(p))<=0))
		    x = a.get(q);
		int i = p-1;
		int j = q+1;
		while (true) {
		    do i++; while (!(i>q || a.get(i).compareTo(x)>=0));
		    do j--; while (!(j<p || a.get(j).compareTo(x)<=0));
		    if (i<j) swap(a, i, j);
		    else return j;
		}
    }

    private static <T extends Comparable<T>> void swap (ArrayList<T> a, int i, int j) {
		T x;
		x = a.get(i);
		a.set(i, a.get(j)) ;
		a.set(j, x);
    }
    
    ///para array
    
    public static <T extends Comparable<T>> void sort(T[] a) {
    	quicksort(a, 0, a.length-1);
    }


    private static <T extends Comparable<T>> void quicksort (T[] a, int i, int j) {
		if (i<j) {
		    int l = partition(a,i,j);
		    quicksort(a, i, l);
		    quicksort(a, l+1, j);
		}
    }

    private static <T extends Comparable<T>> int partition(T[] a, int p, int q) {
		T x = a[p];
		int m = (p+q)/2;
		if ((a[p].compareTo(a[m])<=0 && a[m].compareTo(a[q])<=0) || (a[q].compareTo(a[m])<=0 && a[m].compareTo(a[p])<=0))
		    x = a[m];
		if ((a[p].compareTo(a[q])<=0 && a[q].compareTo(a[m])<=0) || (a[m].compareTo(a[q])<=0 && a[q].compareTo(a[p])<=0))
		    x = a[q];
		int i = p-1;
		int j = q+1;
		while (true) {
		    do i++; while (!(i>q || a[i].compareTo(x)>=0));
		    do j--; while (!(j<p || a[j].compareTo(x)<=0));
		    if (i<j) swap(a, i, j);
		    else return j;
		}
    }

    private static <T extends Comparable<T>> void swap (T[] a, int i, int j) {
		T x;
		x = a[i];
		a[i] = a[j];
		a[j] = x;
    }
    
    /// Para LinkedList
    public static <T extends Comparable<T>> void quick(Lista<T> list){
    	T[] a = null;
    	int i;
    	for (i = 0; i <= list.size; i++){
    		a[i] = list.ObtDato(i);
    	}
    	sortLinked(a, list);
    }
    
    public static <T extends Comparable<T>> void sortLinked(T[] a, Lista<T> list) {
    	quicksortLinked(a, 0, a.length-1, list);
    }


    private static <T extends Comparable<T>> void quicksortLinked (T[] a, int i, int j, Lista<T> list) {
		if (i<j) {
		    int l = partitionLinked(a,i,j, list);
		    quicksortLinked(a, i, l, list);
		    quicksortLinked(a, l+1, j, list);
		}
    }

    private static <T extends Comparable<T>> int partitionLinked(T[] a, int p, int q, Lista<T> list) {
		T x = a[p];
		int m = (p+q)/2;
		if ((a[p].compareTo(a[m])<=0 && a[m].compareTo(a[q])<=0) || (a[q].compareTo(a[m])<=0 && a[m].compareTo(a[p])<=0))
		    x = a[m];
		if ((a[p].compareTo(a[q])<=0 && a[q].compareTo(a[m])<=0) || (a[m].compareTo(a[q])<=0 && a[q].compareTo(a[p])<=0))
		    x = a[q];
		int i = p-1;
		int j = q+1;
		while (true) {
		    do i++; while (!(i>q || a[i].compareTo(x)>=0));
		    do j--; while (!(j<p || a[j].compareTo(x)<=0));
		    if (i<j) swapLinked(a, i, j, list);
		    else return j;
		}
    }

    private static <T extends Comparable<T>> void swapLinked (T[] a, int i, int j, Lista<T> list) {
		T x;
		x = a[i];
		a[i] = a[j];
		a[j] = x;
		anadir(a, list);
    }
    
    public static <T extends Comparable<T>> void anadir(T[] a, Lista<T> list){
    	if(a.length == list.size){
    		for(int i = 0; i < list.size; i++ ){
    			list.ModDato(i, a[i]);
    		}
    	}
    }
}

